% MWrap file 

@function [pottarg, gradtarg, hesstarg] = l3ddirectcdh_mex(nd, sources, charges, dipoles, ns, targ, nt, pottarg, gradtarg, hesstarg, thresh)
nd3 = 3*nd;
nd6 = 6*nd;
dipoles = reshape(dipoles,nd3,ns);
gradtarg = reshape(gradtarg,nd3,nt);
hesstarg = reshape(hesstarg,nd6,nt);
# FORTRAN l3ddirectcdh(int[1] nd,  double[3,ns] sources, double[nd,ns] charges, double[nd3,ns] dipoles, int[1] ns, double[3,nt] targ, int[1] nt, inout double[nd,nt] pottarg, inout double[nd3,nt] gradtarg, inout double[nd6,nt] hesstarg, double[1] thresh);
gradtarg = reshape(gradtarg,nd,3,nt);
hesstarg = reshape(hesstarg,nd,6,nt);
end

@function nterms = l3dterms_mex(eps, nterms)
# FORTRAN l3dterms(double[1] eps, inout int[1] nterms);
end

@function [w,lused] = ylgndrfwini_mex(nmax, w, lw, lused)
nw = length(w);
# FORTRAN ylgndrfwini(int[1] nmax, inout double[nw] w, int[1] lw, inout int[1] lused);
end

@function scarray = l3dmpevalhessdini_mex(nterms,scarray)
nscarray = length(scarray);
# FORTRAN l3dmpevalhessdini(int[1] nterms, inout double[nscarray] scarray);
end

@function scarray = l3dtaevalhessdini_mex(nterms,scarray)
nscarray = length(scarray);
# FORTRAN l3dtaevalhessdini(int[1] nterms, inout double[nscarray] scarray);
end

@function mpole = mpzero_mex(nd,mpole,nterms)
ndnterms = nd*(nterms+1);
ntermst2p1 = 2*nterms+1;
mpole = reshape(mpole,ndnterms,ntermst2p1);
# FORTRAN mpzero(int[1] nd, inout dcomplex[ndnterms,ntermst2p1] mpole, int[1] nterms);
mpole = reshape(mpole,nd,nterms+1,ntermst2p1);
end

@function mpole = l3dformmpcd_mex(nd,rscale,sources,charge,dipvec,ns,center,nterms,mpole,wlege,nlege)
nd3 = 3*nd;
ndnterms = nd*(nterms+1);
ntermst2p1 = 2*nterms+1;
% nlege1 = nlege+1; % although wlege is defined with dimension nlege1^2, it is actually 2*(nlege+1)^2 
nwlege = numel(wlege);
dipvec = reshape(dipvec,nd3,ns);
mpole = reshape(mpole,ndnterms,ntermst2p1);
# FORTRAN l3dformmpcd(int[1] nd, double[1] rscale, double[3,ns] sources, double[nd,ns] charge, double[nd3,ns] dipvec, int[1] ns, double[3] center, int[1] nterms, inout dcomplex[ndnterms,ntermst2p1] mpole, double[nwlege] wlege, int[1] nlege);
mpole = reshape(mpole,nd,nterms+1,2*nterms+1);
end

@function dc = getsqrtbinomialcoeffs_mex(n,dc)
n1 = n+1;
# FORTRAN getsqrtbinomialcoeffs(int[1] n, inout double[n1,n1] dc);
end

@function mpolen = l3dmpmp_mex(nd,sc1,x0y0z0,mpole,nterms,sc2,xnynzn,mpolen,nterms2,dc,lca)
ndnterms = nd*(nterms+1);
ntermst2p1 = 2*nterms+1;
mpole = reshape(mpole,ndnterms,ntermst2p1);
ndnterms2 = nd*(nterms2+1);
nterms2t2p1 = 2*nterms2+1;
mpolen = reshape(mpolen,ndnterms2,nterms2t2p1);
lca1 = lca+1;
# FORTRAN l3dmpmp(int[1] nd, double[1] sc1, double[3] x0y0z0, dcomplex[ndnterms,ntermst2p1] mpole, int[1] nterms, double[1] sc2, double[3] xnynzn, inout dcomplex[ndnterms2,nterms2t2p1] mpolen, int[1] nterms2, double[lca1,lca1] dc, int[1] lca);
mpolen = reshape(mpolen,nd,nterms2+1,2*nterms2+1);
end

@function [pot,grad,hess] = l3dmpevalh_mex(nd,rscale,center,mpole,nterms,ztarg,nt,pot,grad,hess,thresh,scarray)
nd3 = 3*nd;
nd6 = 6*nd;
ndnterms = nd*(nterms+1);
ntermst2p1 = 2*nterms+1;
mpole = reshape(mpole,ndnterms,ntermst2p1);
grad = reshape(grad,nd3,nt);
hess = reshape(hess,nd6,nt);
nscarray = length(scarray);
# FORTRAN l3dmpevalh(int[1] nd, double[1] rscale, double[3] center, dcomplex[ndnterms,ntermst2p1] mpole, int[1] nterms, double[3,nt] ztarg, int[1] nt, inout double[nd,nt] pot, inout double[nd3,nt] grad, inout double[nd6,nt] hess, double[1] thresh, double[nscarray] scarray);
grad = reshape(grad,nd,3,nt);
hess = reshape(hess,nd,6,nt);
end

@function local = l3dmploc_mex(nd,sc1,x0y0z0,mpole,nterms,sc2,xnynzn,local,nterms2,dc,lca)
ndnterms = nd*(nterms+1);
ntermst2p1 = 2*nterms+1;
mpole = reshape(mpole,ndnterms,ntermst2p1);
ndnterms2 = nd*(nterms2+1);
nterms2t2p1 = 2*nterms2+1;
local = reshape(local,ndnterms2,nterms2t2p1);
lca1 = lca+1;
# FORTRAN l3dmploc(int[1] nd, double[1] sc1, double[3] x0y0z0, dcomplex[ndnterms,ntermst2p1] mpole, int[1] nterms, double[1] sc2, double[3] xnynzn, inout dcomplex[ndnterms2,nterms2t2p1] local, int[1] nterms2, double[lca1,lca1] dc, int[1] lca);
local = reshape(local,nd,nterms2+1,nterms2t2p1);
end

@function [pot,grad,hess] = l3dtaevalh_mex(nd,rscale,center,local,nterms,ztarg,ntarg,pot,grad,hess,scarray)
nd3 = 3*nd;
nd6 = 6*nd;
ndnterms = nd*(nterms+1);
ntermst2p1 = 2*nterms+1;
local = reshape(local,ndnterms,ntermst2p1);
grad = reshape(grad,nd3,ntarg);
hess = reshape(hess,nd6,ntarg);
nscarray = length(scarray);
# FORTRAN l3dtaevalh(int[1] nd, double[1] rscale, double[3] center, dcomplex[ndnterms,ntermst2p1] local, int[1] nterms, double[3,ntarg] ztarg, int[1] ntarg, inout double[nd,ntarg] pot, inout double[nd3,ntarg] grad, inout double[nd6,ntarg] hess, double[nscarray] scarray);
grad = reshape(grad,nd,3,ntarg);
hess = reshape(hess,nd,6,ntarg);
end

@function local = l3dlocloc_mex(nd,sc1,x0y0z0,locold,nterms,sc2,xnynzn,local,nterms2,dc,lda)
ndnterms = nd*(nterms+1);
ntermst2p1 = 2*nterms+1;
locold = reshape(locold,ndnterms,ntermst2p1);
ndnterms2 = nd*(nterms2+1);
nterms2t2p1 = 2*nterms2+1;
local = reshape(local,ndnterms2,nterms2t2p1);
lda1 = lda+1;
# FORTRAN l3dlocloc(int[1] nd, double[1] sc1, double[3] x0y0z0, dcomplex[ndnterms,ntermst2p1] locold, int[1] nterms, double[1] sc2, double[3] xnynzn, inout dcomplex[ndnterms2,nterms2t2p1] local, int[1] nterms2, double[lda1,lda1] dc, int[1] lda);
local = reshape(local,nd,nterms2+1,nterms2t2p1);
end

@function mpole = l3dformtacd_mex(nd,rscale,sources,charge,dipvec,ns,center,nterms,mpole,wlege,nlege)
nd3 = 3*nd;
nd6 = 6*nd;
dipvec = reshape(dipvec,nd3,ns);
ndnterms = nd*(nterms+1);
ntermst2p1 = 2*nterms+1;
mpole = reshape(mpole,ndnterms,ntermst2p1);
% nlege1 = nlege+1; % although wlege is defined with dimension nlege1^2, it is actually 2*(nlege+1)^2 
nwlege = numel(wlege);
# FORTRAN l3dformtacd(int[1] nd, double[1] rscale, double[3,ns] sources, double[nd,ns] charge, double[nd3,ns] dipvec, int[1] ns, double[3] center, int[1] nterms, inout dcomplex[ndnterms,ntermst2p1] mpole, double[nwlege] wlege, int[1] nlege);
mpole = reshape(mpole,nd,nterms+1,2*nterms+1);
end

@function hkrand = hkrand_mex(iseed_hk)
# double hkrand = FORTRAN hkrand(int[1] iseed_hk);
end

@function mpole = l3dformmpc_mex(nd,rscale,sources,charge,ns,center,nterms,mpole,wlege,nlege)
ndnterms = nd*(nterms+1);
ntermst2p1 = 2*nterms+1;
mpole = reshape(mpole,ndnterms,ntermst2p1);
nwlege = numel(wlege);
# FORTRAN l3dformmpc(int[1] nd, double[1] rscale, double[3,ns] sources, double[nd,ns] charge, int[1] ns, double[3] center, int[1] nterms, inout dcomplex[ndnterms,ntermst2p1] mpole, double[nwlege] wlege, int[1] nlege);
mpole = reshape(mpole,nd,nterms+1,2*nterms+1);
end

%@function [pot,grad,hess,pottarg,gradtarg,hesstarg] = lfmm3d_mex(nd,eps,ns,source,ifcharge,charge,ifdipole,dipvec,iper,ifpgh,pot,grad,hess,nt,targ,ifpghtarg,pottarg,gradtarg,hesstarg,ier)
%% need to take care of ns or nt = 0 ?
%nd3 = nd*3;
%nd6 = nd*6;
%dipvec = reshape(dipvec,nd3,ns);
%grad = reshape(grad,nd3,ns);
%hess = reshape(hess,nd6,ns);
%gradtarg = reshape(gradtarg,nd3,nt);
%hesstarg = reshape(hesstarg,nd6,nt);
%# FORTRAN lfmm3d(int[1] nd, double[1] eps, int[1] ns, double[3,ns] source, int[1] ifcharge, double[nd,ns] charge, int[1] ifdipole, double[nd3,ns] dipvec, int[1] iper, int[1] ifpgh, inout double[nd,ns] pot, inout double[nd3,ns] grad, inout double[nd6,ns] hess, int[1] nt, double[3,nt] targ, int[1] ifpghtarg, inout double[nd,nt] pottarg, inout double[nd3,nt] gradtarg, inout double[nd6,nt] hesstarg, int[1] ier);
%grad = reshape(grad,nd,3,ns);
%hess = reshape(hess,nd,6,ns);
%gradtarg = reshape(gradtarg,nd,3,nt);
%hesstarg = reshape(hesstarg,nd,6,nt);
%end

@function local = lfmm3d_mps0_mex(nd, eps ,nmpole, cmpole, rmpole, mterms, mpole, impole, local, ier)
ntmp = numel(mpole);
mtmp = numel(local);
# FORTRAN lfmm3dmps0(int[1] nd, double[1] eps , int[1] nmpole, double[3,nmpole] cmpole, double[nmpole] rmpole, int[nmpole] mterms, dcomplex[ntmp] mpole, int[nmpole] impole, inout dcomplex[mtmp] local, int[1] ier);
end

@function pot = l3dtaevalp_mex(nd,rscale,center,mpole,nterms,ztarg,ntarg,pot,wlege,nlege)
ndnterms = nd*(nterms+1);
ntermst2p1 = 2*nterms+1;
mpole = reshape(mpole,ndnterms,ntermst2p1);
nwlege = numel(wlege);
# FORTRAN l3dtaevalp(int[1] nd, double[1] rscale, double[3] center, dcomplex[ndnterms,ntermst2p1] mpole, int[1] nterms, double[3,ntarg] ztarg, int[1] ntarg, inout double[nd,ntarg] pot, double[nwlege] wlege, int[1] nlege);
end

@function  [nlevels,nboxes,ltree] = pts_tree_mem_mex(src,ns,targ,nt,idivflag,ndiv,nlmin,nlmax,ifunif,iper,nlevels,nboxes,ltree)
ntuse = max(nt,1);
if nt == 0, targ = zeros(3,1); end
# FORTRAN ptstreemem(double[3,ns] src, int[1] ns, double[3,ntuse] targ, int[1] nt, int[1] idivflag, int[1] ndiv, int[1] nlmin, int[1] nlmax, int[1] ifunif, int[1] iper, inout int[1] nlevels, inout int[1] nboxes, inout int[1] ltree);    
end

@function [itree,iptr,centers,boxsize] = pts_tree_build_mex(src,ns,targ,nt,idivflag,ndiv,nlmin,nlmax,ifunif,iper,nlevels,nboxes,ltree,itree,iptr,centers,boxsize)
nlevels1 = nlevels+1;
ntuse = max(nt,1);
if nt == 0, targ = zeros(3,1); end
# FORTRAN ptstreebuild( double[3,ns] src, int[1] ns, double[3,ntuse] targ, int[1] nt, int[1] idivflag, int[1] ndiv, int[1] nlmin, int[1] nlmax, int[1] ifunif, int[1] iper, int[1] nlevels, int[1] nboxes, int[1] ltree, inout int[ltree] itree, inout int[8] iptr, inout double[3,nboxes] centers, inout double[nlevels1] boxsize);
%ptstreebuild(src,ns,targ,nt,idivflag,ndiv,nlmin,nlmax,ifunif,iper,nlevels,nboxes,ltree,itree,iptr,centers,boxsize);
end

@function [ixy,ixyse] = pts_tree_sort_mex(n,xys,itree,ltree,nboxes,nlevels,iptr,centers,ixy,ixyse)
# FORTRAN ptstreesort(int[1] n, double[3,n] xys, int[ltree] itree, int[1] ltree, int[1] nboxes, int[1] nlevels, int[8] iptr, double[3,nboxes] centers, inout int[n] ixy, inout int[2,nboxes] ixyse);
end

@function nterms = l3dterms_mex(eps, nterms)
# FORTRAN l3dterms(double[1] eps, inout int[1] nterms);
end

@function arrsort = dreorderf_mex(ndim,n,arr,arrsort,iarr)
len = numel(arr(1,:));
# FORTRAN dreorderf(int[1] ndim, int[1] n, double[ndim,len] arr, inout double[ndim,len] arrsort, int[len] iarr);
end

@function arrsort = ireorderf_mex(ndim,n,arr,arrsort,iarr)
len = numel(arr(1,:));
# FORTRAN ireorderf(int[1] ndim, int[1] n, int[ndim,len] arr, inout int[ndim,len] arrsort, int[len] iarr);
end

@function [iaddr,lmptot] = mpalloc_mex(nd,laddr,iaddr,nlevels,lmptot,nterms,nboxes)
% one additional imput?
nlevels1 = nlevels+1;
# FORTRAN mpalloc0(int[1] nd, int[2,nlevels1] laddr, inout int[2,nboxes] iaddr, int[1] nlevels, inout int[1] lmptot, int[nlevels1] nterms, int[1] nboxes);
end

@function [mnlist1,mnlist2,mnlist3,mnlist4] = computemnlists_mex(nlevels,nboxes,laddr,boxsize,centers,iparent,nchild,ichild,isep,nnbors,mnbors,nbors,iper,mnlist1,mnlist2,mnlist3,mnlist4)
nlevels1 = nlevels+1;
# FORTRAN computemnlists(int[1] nlevels, int[1] nboxes, int[2,nlevels1] laddr, double[nlevels1] boxsize, double[3,nboxes] centers, int[nboxes] iparent, int[nboxes] nchild, int[8,nboxes] ichild, int[1] isep, int[nboxes] nnbors, int[1] mnbors, int[mnbors,nboxes] nbors, int[1] iper, inout int[1] mnlist1, inout int[1] mnlist2, inout int[1] mnlist3, inout int[1] mnlist4);
end

@function [nlist1,list1,nlist2,list2,nlist3,list3,nlist4,list4]=computelists_mex(nlevels,nboxes,laddr,boxsize,centers,iparent,nchild,ichild,isep,nnbors,mnbors,nbors,iper,nlist1,mnlist1,list1,nlist2,mnlist2,list2,nlist3,mnlist3,list3,nlist4,mnlist4,list4)
nlevels1 = nlevels+1;
# FORTRAN computelists(int[1] nlevels, int[1] nboxes, int[2,nlevels1] laddr, double[nlevels1] boxsize, double[3,nboxes] centers, int[nboxes] iparent, int[nboxes] nchild, int[8,nboxes] ichild, int[1] isep, int[nboxes] nnbors, int[1] mnbors, int[mnbors,nboxes] nbors, int[1] iper, inout int[nboxes] nlist1, int[1] mnlist1, inout int[mnlist1,nboxes] list1, inout int[nboxes] nlist2, int[1] mnlist2, inout int[mnlist2,nboxes] list2, inout int[nboxes] nlist3, int[1] mnlist3, inout int[mnlist3,nboxes] list3, inout int[nboxes] nlist4, int[1] mnlist4, inout int[mnlist4,nboxes] list4);
end

@function [carray,rdpi2,rdmpi2,rdsq3,rdmsq3,dc] = getpwrotmat_mex(nterms,carray,rdpi2,rdmpi2,rdsq3,rdmsq3,dc)
nterms4p1 = 4*nterms+1;
nterms1 = nterms+1;
nterms1s = nterms1^2;
nterms2p1 = nterms*2+1;
rdpi2 = reshape(rdpi2,nterms1s,nterms2p1);
rdmpi2 = reshape(rdmpi2,nterms1s,nterms2p1);
rdsq3 = reshape(rdsq3,nterms1s,nterms2p1);
rdmsq3 = reshape(rdmsq3,nterms1s,nterms2p1);
# FORTRAN getpwrotmat(int[1] nterms, inout double[nterms4p1,nterms4p1] carray, inout double[nterms1s,nterms2p1] rdpi2, inout double[nterms1s,nterms2p1] rdmpi2, inout double[nterms1s,nterms2p1] rdsq3, inout double[nterms1s,nterms2p1] rdmsq3, inout double[nterms4p1,nterms4p1] dc);
rdpi2 = reshape(rdpi2,nterms1,nterms1,nterms2p1);
rdmpi2 = reshape(rdmpi2,nterms1,nterms1,nterms2p1);
rdsq3 = reshape(rdsq3,nterms1,nterms1,nterms2p1);
rdmsq3 = reshape(rdmsq3,nterms1,nterms1,nterms2p1);
end

@function [x,w] = vwts_mex(x,w,n)
# FORTRAN vwts(inout double[n] x, inout double[n] w, int[1] n);
end

@function numtets = numthetahalf_mex(numtets,nlams)
# FORTRAN numthetahalf(inout int[nlams] numtets, int[1] nlams);
end

@function numtets = numthetafour_mex(numtets,nlams)
# FORTRAN numthetafour(inout int[nlams] numtets, int[1] nlams);
end

@function rlsc = rlscini_mex(rlsc,nlambs,rlams,nterms)
nterms1 = nterms+1;
nterms1s = nterms1^2;
rlsc = reshape(rlsc,nterms1s,nlambs);
# FORTRAN rlscini(inout double[nterms1s,nlambs] rlsc, int[1] nlambs, double[nlambs] rlams, int[1] nterms);
rlsc = reshape(rlsc,nterms1,nterms1,nlambs);
end

@function [xs,ys,zs] = mkexps_mex(rlams,nlambs,numphys,nexptotp,xs,ys,zs)
# FORTRAN mkexps(double[nlambs] rlams, int[1] nlambs, int[nlambs] numphys, int[1] nexptotp, inout dcomplex[11,nexptotp] xs, inout dcomplex[11,nexptotp] ys, inout double[5,nexptotp] zs);
end

@function [fexpe,fexpo,fexpback] = mkfexp_mex(nlambs,numfour,numphys,fexpe,fexpo,fexpback)
nn = numel(fexpe);
# FORTRAN mkfexp(int[1] nlambs, int[nlambs] numfour, int[nlambs] numphys, inout dcomplex[nn] fexpe, inout dcomplex[nn] fexpo, inout dcomplex[nn] fexpback);
end

@function mpoleout = mpscale_mex(nd,nterms,mpolein,rsc,mpoleout)
nterms1 = nterms+1;
ndnterms = nd*(nterms+1);
ntermst2p1 = 2*nterms+1;
mpolein = reshape(mpolein,ndnterms,ntermst2p1);
mpoleout = reshape(mpoleout,ndnterms,ntermst2p1);
# FORTRAN mpscale(int[1] nd, int[1] nterms, dcomplex[ndnterms,ntermst2p1] mpolein, double[nterms1] rsc, inout dcomplex[ndnterms,ntermst2p1] mpoleout);
mpoleout = reshape(mpoleout,nd,nterms+1,2*nterms+1);
end

@function [mexpupf,mexpdownf] = mpoletoexp_mex(nd,mpole,nterms,nlambs,numtets,nexptot,mexpupf,mexpdownf,rlsc)
ndnterms = nd*(nterms+1);
ntermst2p1 = 2*nterms+1;
mpole = reshape(mpole,ndnterms,ntermst2p1);
nterms1 = nterms+1;
nterms1s = nterms1^2;
rlsc = reshape(rlsc,nterms1s,nlambs);
# FORTRAN mpoletoexp(int[1] nd, dcomplex[ndnterms,ntermst2p1] mpole, int[1] nterms, int[1] nlambs, int[nlambs] numtets, int[1] nexptot, inout dcomplex[nd,nexptot] mexpupf, inout dcomplex[nd,nexptot] mexpdownf, double[nterms1s,nlambs] rlsc);
end

@function mexpphys = ftophys_mex(nd,mexpf,nlambs,rlams,numfour,numphys,nthmax,mexpphys,fexpe,fexpo)
nexptot = size(mexpf,2);
nn = numel(fexpe);
nexptotp = size(mexpphys,2);
# FORTRAN ftophys(int[1] nd, dcomplex[nd,nexptot] mexpf, int[1] nlambs, double[nlambs] rlams, int[nlambs] numfour, int[nlambs] numphys, int[1] nthmax, inout dcomplex[nd,nexptotp] mexpphys, dcomplex[nn] fexpe, dcomplex[nn] fexpo);
end

@function mrotate = rotztoy_mex(nd,nterms,mpole,mrotate,rdminus)
ndnterms = nd*(nterms+1);
ntermst2p1 = 2*nterms+1;
mpole = reshape(mpole,ndnterms,ntermst2p1);
mrotate = reshape(mrotate,ndnterms,ntermst2p1);
nterms1 = nterms+1;
nterms1s = nterms1^2;
nterms2p1 = nterms*2+1; 
rdminus = reshape(rdminus,nterms1s,nterms2p1);
# FORTRAN rotztoy(int[1] nd, int[1] nterms, dcomplex[ndnterms,ntermst2p1] mpole, inout dcomplex[ndnterms,ntermst2p1] mrotate, double[nterms1s,nterms2p1] rdminus);
mrotate = reshape(mrotate,nd,nterms+1,2*nterms+1);
end

@function mrotate = rotztox_mex(nd,nterms,mpole,mrotate,rdplus)
ndnterms = nd*(nterms+1);
ntermst2p1 = 2*nterms+1;
mpole = reshape(mpole,ndnterms,ntermst2p1);
mrotate = reshape(mrotate,ndnterms,ntermst2p1);
nterms1 = nterms+1;
nterms1s = nterms1^2;
nterms2p1 = nterms*2+1; 
rdplus = reshape(rdplus,nterms1s,nterms2p1);
# FORTRAN rotztox(int[1] nd, int[1] nterms, dcomplex[ndnterms,ntermst2p1] mpole, inout dcomplex[ndnterms,ntermst2p1] mrotate, double[nterms1s,nterms2p1] rdplus);
mrotate = reshape(mrotate,nd,nterms+1,2*nterms+1);
end

@function [nuall,uall,ndall,dall,nnall,nall,nsall,sall,neall,eall,nwall,wall,nu1234,u1234,nd5678,d5678,nn1256,n1256,ns3478,s3478,ne1357,e1357,nw2468,w2468,nn12,n12,nn56,n56,ns34,s34,ns78,s78,ne13,e13,ne57,e57,nw24,w24,nw68,w68,ne1,e1,ne3,e3,ne5,e5,ne7,e7,nw2,w2,nw4,w4,nw6,w6,nw8,w8] = getpwlistall_mex(ibox,bs,nboxes,nnbors,nbors,nchild,ichild,centers,isep,nuall,uall,ndall,dall,nnall,nall,nsall,sall,neall,eall,nwall,wall,nu1234,u1234,nd5678,d5678,nn1256,n1256,ns3478,s3478,ne1357,e1357,nw2468,w2468,nn12,n12,nn56,n56,ns34,s34,ns78,s78,ne13,e13,ne57,e57,nw24,w24,nw68,w68,ne1,e1,ne3,e3,ne5,e5,ne7,e7,nw2,w2,nw4,w4,nw6,w6,nw8,w8)
% ...
% error: Identifier should be a string... why?
ichild = reshape(ichild,8,nboxes);
# FORTRAN getpwlistall(int[1]ibox,double[1]bs,int[1]nboxes,int[1]nnbors,int[nnbors]nbors,int[1]nchild,int[8,nboxes]ichild,double[3,nboxes]centers,int[1]isep,inout int[1]nuall,inout int[200]uall,inout int[1]ndall,inout int[200]dall,inout int[1]nnall,inout int[120]nall,inout int[1]nsall,inout int[120]sall,inout int[1]neall,inout int[72]eall,inout int[1]nwall,inout int[72]wall,inout int[1]nu1234,inout int[36]u1234,inout int[1]nd5678,inout int[36]d5678,inout int[1]nn1256,inout int[24]n1256,inout int[1]ns3478,inout int[24]s3478,inout int[1]ne1357,inout int[16]e1357,inout int[1]nw2468,inout int[16]w2468,inout int[1]nn12,inout int[20]n12,inout int[1]nn56,inout int[20]n56,inout int[1]ns34,inout int[20]s34,inout int[1]ns78,inout int[20]s78,inout int[1]ne13,inout int[20]e13,inout int[1]ne57,inout int[20]e57,inout int[1]nw24,inout int[20]w24,inout int[1]nw68,inout int[20]w68,inout int[1]ne1,inout int[5]e1,inout int[1]ne3,inout int[5]e3,inout int[1]ne5,inout int[5]e5,inout int[1]ne7,inout int[5]e7,inout int[1]nw2,inout int[5]w2,inout int[1]nw4,inout int[5]w4,inout int[1]nw6,inout int[5]w6,inout int[1]nw8,inout int[5]w8);
end    

@function rmlexp = getpwlistallprocessudnsewexp02_mex(ibox,bs,nboxes,nnbors,nbors,nchild,ichild,centers,isep,nd,ilev,rscale,nterms,iaddrtmp,rmlexp,lmptottmp,rlams,whts,nlams,nfourier,nphysical,nthmax,nexptot,nexptotp,mexp,mexpupdown,mexpupphys,mexpdownphys,mexppall,rdplus,rdminus,xs,ys,zs,fexpback,nn,rlsc,rscpow, pgboxwexp,cntlist4,list4ct,nlist4,list4,mnlist4)
ichild=reshape(ichild,8,nboxes);
ndnexptotp=nd*nexptotp;
nboxes6=nboxes*6;
mexp=reshape(mexp,ndnexptotp,nboxes6);
ndnexptotp=nd*nexptotp;
mexppall=reshape(mexppall,ndnexptotp,16);
nterms1 = nterms+1;
nterms1s = nterms1^2;
nterms2p1 = nterms*2+1; 
rdplus = reshape(rdplus,nterms1s,nterms2p1);
rdminus = reshape(rdminus,nterms1s,nterms2p1);
cntlist46 = cntlist4*6;
nw8 = 0;
rlsc = reshape(rlsc,nterms1s,nlams); 
ndnexptot = nd*nexptot;
mexpupdown = reshape(mexpupdown,ndnexptot,2);
%# FORTRAN getpwlistallprocessudnsewexp0(int[1] ibox, double[1] bs, int[1] nboxes, int[1] nnbors, int[nnbors] nbors, int[1] nchild, int[8,nboxes] ichild, double[3,nboxes] centers, int[1] isep, int[1] nd, int[1] ilev, double[1] rscale, int[1] nterms, int[2,nboxes] iaddrtmp, double[lmptottmp] rmlexp, int[1] lmptottmp, double[nlams] rlams, double[nlams] whts, int[1] nlams, int[nlams] nfourier, int[nlams] nphysical, int[1] nthmax, int[1] nexptot, int[1] nexptotp, dcomplex[ndnexptotp,nboxes6] mexp, dcomplex[nd,nexptot] mexpup, dcomplex[nd,nexptot] mexpdown, dcomplex[nd,nexptotp] mexpupphys, dcomplex[nd,nexptotp] mexpdownphys, dcomplex[ndnexptotp,16] mexppall, double[nterms1s,nterms2p1] rdplus, double[nterms1s,nterms2p1] rdminus, dcomplex[11,nexptotp] xs, dcomplex[11,nexptotp] ys, double[5,nexptotp] zs, dcomplex[nn] fexpback, int[1] nn, double[nterms1s,nlams] rlsc, double[nterms1] rscpow, dcomplex[ndnexptotp,cntlist46] pgboxwexp, int[1] cntlist4, int[nboxes] list4ct, int[nboxes] nlist4, int[mnlist4,nboxes] list4, int[1] mnlist4);
# FORTRAN getpwlistallprocessudnsewexp02(int[1] ibox, double[1] bs, int[1] nboxes, int[1] nnbors, int[nnbors] nbors, int[1] nchild, int[8,nboxes] ichild, double[3,nboxes] centers, int[1] isep, int[1] nd, int[1] ilev, double[1] rscale, int[1] nterms, int[2,nboxes] iaddrtmp, inout double[lmptottmp] rmlexp, int[1] lmptottmp, double[nlams] rlams, double[nlams] whts, int[1] nlams, int[nlams] nfourier, int[nlams] nphysical, int[1] nthmax, int[1] nexptot, int[1] nexptotp, dcomplex[ndnexptotp,nboxes6] mexp, dcomplex[ndnexptot,2] mexpupdown, dcomplex[nd,nexptotp] mexpupphys, dcomplex[nd,nexptotp] mexpdownphys, dcomplex[ndnexptotp,16] mexppall, double[nterms1s,nterms2p1] rdplus, double[nterms1s,nterms2p1] rdminus,  dcomplex[11,nexptotp] xs, dcomplex[11,nexptotp] ys, double[5,nexptotp] zs, double[nterms1s,nlams] rlsc, double[nterms1] rscpow, dcomplex[nn] fexpback, int[1] nn);
end

@function rmlexp = getpwlistallprocessudnsewexp0_mex(ibox,bs,nboxes,nnbors,nbors,nchild,ichild,centers,isep,nd,ilev,rscale,nterms,iaddrtmp,rmlexp,lmptottmp,rlams,whts,nlams,nfourier,nphysical,nthmax,nexptot,nexptotp,mexp,mexpup,mexpdown,mexpupphys,mexpdownphys,mexppall,rdplus,rdminus,xs,ys,zs,fexpback,nn,rlsc,rscpow, pgboxwexp,cntlist4,list4ct,nlist4,list4,mnlist4)
ichild=reshape(ichild,8,nboxes);
ndnexptotp=nd*nexptotp;
nboxes6=nboxes*6;
mexp=reshape(mexp,ndnexptotp,nboxes6);
ndnexptotp=nd*nexptotp;
mexppall=reshape(mexppall,ndnexptotp,16);
nterms1 = nterms+1;
nterms1s = nterms1^2;
nterms2p1 = nterms*2+1; 
rdplus = reshape(rdplus,nterms1s,nterms2p1);
rdminus = reshape(rdminus,nterms1s,nterms2p1);
cntlist46 = cntlist4*6;
nw8 = 0;
rlsc = reshape(rlsc,nterms1s,nlams); 
ndnexptot = nd*nexptot;
pgboxwexp = reshape(pgboxwexp,ndnexptotp,cntlist46);
# FORTRAN getpwlistallprocessudnsewexp0(int[1] ibox, double[1] bs, int[1] nboxes, int[1] nnbors, int[nnbors] nbors, int[1] nchild, int[8,nboxes] ichild, double[3,nboxes] centers, int[1] isep, int[1] nd, int[1] ilev, double[1] rscale, int[1] nterms, int[2,nboxes] iaddrtmp, inout double[lmptottmp] rmlexp, int[1] lmptottmp, double[nlams] rlams, double[nlams] whts, int[1] nlams, int[nlams] nfourier, int[nlams] nphysical, int[1] nthmax, int[1] nexptot, int[1] nexptotp, dcomplex[ndnexptotp,nboxes6] mexp, dcomplex[nd,nexptot] mexpup, dcomplex[nd,nexptot] mexpdown, dcomplex[nd,nexptotp] mexpupphys, dcomplex[nd,nexptotp] mexpdownphys, dcomplex[ndnexptotp,16] mexppall, double[nterms1s,nterms2p1] rdplus, double[nterms1s,nterms2p1] rdminus, dcomplex[11,nexptotp] xs, dcomplex[11,nexptotp] ys, double[5,nexptotp] zs, dcomplex[nn] fexpback, int[1] nn, double[nterms1s,nlams] rlsc, double[nterms1] rscpow, dcomplex[ndnexptotp,cntlist46] pgboxwexp, int[1] cntlist4, int[nboxes] list4ct, int[nboxes] nlist4, int[mnlist4,nboxes] list4, int[1] mnlist4);
end

@function [isorted,iboxfl,subcenters] = subdividebox_mex(pos,npts,center,boxsize,isorted,iboxfl,subcenters)
nmaxt = length(isorted);
# FORTRAN subdividebox(double[3,npts] pos, int[1] npts, double[3] center, double[1] boxsize, inout int[nmaxt] isorted, inout int[2,8] iboxfl, inout double[3,8] subcenters);
end

@function [mexpuall,mexpdall] = processgboxudexp_mex(nd,mexpugbox,mexpdgbox,jbox,nexptotp,mexpuall,mexpdall,xs,ys,zs)
# FORTRAN processgboxudexp(int[1] nd, dcomplex[nd,nexptotp] mexpugbox, dcomplex[nd,nexptotp] mexpdgbox, int[1] jbox, int[1] nexptotp, inout dcomplex[nd,nexptotp] mexpuall, inout dcomplex[nd,nexptotp] mexpdall, dcomplex[11,nexptotp] xs, dcomplex[11,nexptotp] ys, double[5,nexptotp] zs);
end

@function rmlexp = getlist3pwallprocessudnsewexp0_mex(ibox,bs,nboxes,nlist3,list3,isep,centers,nd,nterms,rmlexp,rlams,whts,nlams,nfourier,nphysical,nthmax,nexptot,nexptotp,mexp,mexpup,mexpdown,mexpupphys,mexpdownphys,mexppall1,mexppall2,xs,ys,zs,fexpback,nn,rlsc,rscpow,rdplus,rdminus)
nboxes6=nboxes*6;
ndnexptotp=nd*nexptotp;
mexp=reshape(mexp,ndnexptotp,nboxes6);
ndnterms1t2nterms1 = nd*(nterms+1)*(2*nterms+1);
nterms1 = nterms+1;
nterms1s = nterms1^2;
nterms2p1 = nterms*2+1; 
rdplus = reshape(rdplus,nterms1s,nterms2p1);
rdminus = reshape(rdminus,nterms1s,nterms2p1);
rlsc = reshape(rlsc,nterms1s,nlams); 
# FORTRAN getlist3pwallprocessudnsewexp0(int[1] ibox, double[1] bs, int[1] nboxes, int[1] nlist3, int[nlist3] list3, int[1] isep, double[3,nboxes] centers, int[1] nd, int[1] nterms, inout dcomplex[ndnterms1t2nterms1,8] rmlexp, double[nlams] rlams, double[nlams] whts, int[1] nlams, int[nlams] nfourier, int[nlams] nphysical, int[1] nthmax, int[1] nexptot, int[1] nexptotp, dcomplex[ndnexptotp,nboxes6] mexp, dcomplex[nd,nexptot] mexpup, dcomplex[nd,nexptot] mexpdown, dcomplex[nd,nexptotp] mexpupphys, dcomplex[nd,nexptotp] mexpdownphys, dcomplex[nd,nexptotp] mexppall1, dcomplex[nd,nexptotp] mexppall2, dcomplex[11,nexptotp] xs, dcomplex[11,nexptotp] ys, double[5,nexptotp] zs, dcomplex[nn] fexpback, int[1] nn, double[nterms1s,nlams] rlsc, double[nterms1] rscpow, double[nterms1s,nterms2p1] rdplus, double[nterms1s,nterms2p1] rdminus);
% getlist3pwallprocessudnsewexp0(               ibox,           bs,        nboxes,        nlist3,             list3,        isep,                  centers,        nd,        nterms,                                      rmlexp,               rlams,               whts,        nlams,            nfourier,            nphysical,        nthmax,        nexptot,        nexptotp,                              mexp,                      mexpup,                      mexpdown,                       mexpupphys,                       mexpdownphys,                       mexppall1,                       mexppall2,                       xs,                       ys,                    zs,              fexpback,        nn,                        rlsc,                 rscpow,                            rdplus,                            rdminus);
rmlexp; % reshape?
end

@function [U,varargout] = pts_tree3d(srcinfo,varargin)
% comments are from 2d... 07/12/23
%
%   generate level restricted tree based on resolving points
%    (Currently only supports, sorting on sources, sorting on
%      targets, or sorting on sources and targets)
%
%   There is additional functionality to further subdivide
%    an existing tree based on resolving a function, 
%      this functionality tree will be added in later
%
%   This code has the following user callable routines
%
%      pts_tree_mem -> returns memory requirements for creating
%         a tree based on max number of sources/targets
%         in a box (tree length
%         number of boxes, number of levels)
%      pts_tree -> Make the actual tree, returns centers of boxes,
%        colleague info, pts sorted on leaf boxes
%
%   
%  Args:
%
%  -  srcinfo: structure
%        structure containing sourceinfo
%     
%     *  srcinfo.sources: double(2,n)    
%           source locations, $x_{j}$
%
%  Optional args
%  -  targ: double(2,nt)
%        target locations, $t_{i}$ 
%  -  opts: options structure, values in brackets indicate default
%           values wherever applicable
%        opts.ndiv: set number of points for subdivision criterion
%        opts.idivflag: set subdivision criterion (0)
%           opts.idivflag = 0, subdivide on sources only
%           opts.idivflag = 1, subdivide on targets only
%           opts.idivflag = 2, subdivide on sources and targets
%  - ndiv: integer
%        subdivide if relevant number of particles
%        per box is greater than ndiv
%
%  Returns:
%  
%  -  U.nlevels: number of levels
%  -  U.nboxes: number of boxes
%  -  U.ltree: length of tree
%  -  U.itree: integer(ltree) 
%           tree info
%  -  U.iptr: integer(8)
%
%     *  iptr(1) - laddr
%     *  iptr(2) - ilevel
%     *  iptr(3) - iparent
%     *  iptr(4) - nchild
%     *  iptr(5) - ichild
%     *  iptr(6) - ncoll
%     *  iptr(7) - coll
%     *  iptr(8) - ltree
%  -  U.centers: xy coordinates of box centers in the oct tree
%  -  U.boxsize: size of box at each of the levels
%

  src = srcinfo.sources;
  [m,ns] = size(src);
  assert(m==3,'The first dimension of sources must be 3');
  
  if( nargin < 1)
    disp('Not enough input arguments, exiting\n');
    return;
  end
  if( nargin == 1 )
    nt = 0;
    targ = zeros(3,1);
    opts = [];
  elseif (nargin == 2)
    nt = 0;
    targ = zeros(3,1);
    opts = varargin{1};
  elseif (nargin == 3)
    targ = varargin{1};
    [m,nt] = size(targ);
    assert(m==3,'First dimension of targets must be 3');
    opts = [];
  elseif (nargin == 4)
    targ = varargin{1};
    [m,nt] = size(targ);
    assert(m==3,'First dimension of targets must be 3');
    opts = varargin{3};
  end
  ntuse = max(nt,1);

  if ns == 0, disp('Nothing to compute'); return; end;

    
  ndiv = 20;
  idivflag = 0;
  if(isfield(opts,'ndiv'))
    ndiv = opts.ndiv;
  end

  if(isfield(opts,'idivflag'))
    idivflag = opts.idivflag;
  end
  
  nlmin = 0;
  nlmax = 51;
  ifunif = 0; % check results for the case ifunif = 1
  iper = 0;
  nlevels = 0;
  nboxes = 0;
  ltree = 0;

# FORTRAN ptstreemem(double[3,ns] src, int[1] ns, double[3,ntuse] targ, int[1] nt, int[1] idivflag, int[1] ndiv, int[1] nlmin, int[1] nlmax, int[1] ifunif, int[1] iper, inout int[1] nlevels, inout int[1] nboxes, inout int[1] ltree);

  itree = zeros(1,ltree);
  iptr = zeros(1,8);
  centers = zeros(3,nboxes);
  nlevels1 = nlevels+1;
  boxsize = zeros(1,nlevels1);

# FORTRAN ptstreebuild( double[3,ns] src, int[1] ns, double[3,ntuse] targ, int[1] nt, int[1] idivflag, int[1] ndiv, int[1] nlmin, int[1] nlmax, int[1] ifunif, int[1] iper, int[1] nlevels, int[1] nboxes, int[1] ltree, inout int[ltree] itree, inout int[8] iptr, inout double[3,nboxes] centers, inout double[nlevels1] boxsize);

  n = ns;
  xys = src;
  ixy = zeros(1,n);
  ixyse = zeros(2,nboxes);

# FORTRAN ptstreesort(int[1] n, double[3,n] xys, int[ltree] itree, int[1] ltree, int[1] nboxes, int[1] nlevels, int[8] iptr, double[3,nboxes] centers, inout int[n] ixy, inout int[2,nboxes] ixyse);

  U.nlevels = nlevels;
  U.nboxes = nboxes;
  U.ltree = ltree;
  U.itree = itree;
  U.iptr = iptr;
  U.centers = centers;
  U.boxsize = boxsize;

  varargout{1} = ixy;
  varargout{2} = ixyse;
end